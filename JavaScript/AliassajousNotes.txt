todo: 
-make a function rsSymmetrize(points, N) - takes an array of points and spits out an array of 
 arrays of points, the first one is the original, the 2nd one has all points rotated by 2pi/N,
 the next by 2*2pi/N, then 3*2pi/N etc until (N-1)*2pi/N
-the up/dow symmetry is then realized by using that function - gets rid of 2 of the 4 rsCurve
 calls ...the reflection-symmetry is still done by 2 calls (rotation can't replace reflection)
 -maybe let the file Aliassajous import p5.js and dat.gui.js, so the html file doesn't have to
  -> cleaner dependency handling (the script carries its dependencies with it rather than relying
  on outside html code doing the right thing)
 -optionally display the curve length tEnd
 -to figure out an appropriate function, tweak the start-value of tEnd - try values 0, 50, 100
  and try to find a function that works well for all 3 values - maybe it should be something 
  like: dt = a / (b + c*tEnd + d*tEnd^2)...so maybe something like
  dt = a / (b + c*sqrt(tEnd) + d*tEnd) would be more appropriate -> needs experimentation
  ...i think, asymptotically, it should behave like k/tEnd some k
 -can we have the glow/decay behavior of the oscilloscope?
 -mix in sinusoids of higher frequency 
 -try something like spirograph images
 -try other waveshapes - maybe use tanh of sin - should give some sort of smooth stop-and-go
  use a function rsSaturatedSine(x, drive)
 -show an optionla counter for taking notes, when interesting things happen
 -maybe give the user a slider to manually adjust length
 -add parameter for color (hue), select actual colors via hsl or hsv
 -respond to certain key-hits with setting tEnd to certain values

 -use transitions between nice symmetric patters that are close to each other, like 
  60/54 and 60/55
 -let shapes rhythmically oscillate around a nice pattern
  -maybe it should be some sort of oscillation that gets damped over time and triggered by beats
   (or every 2nd or 4th beat)
 -smaller number of lines look actually also quite nice - a bit like robot arms - maybe we should
  emphasize the "joints" by drawing circles at the line-ends



Observations for n=2, m=3:
 -when tEnd == numLines, it starts over again - we only need to look at the range
  tEnd = 0...NumLines - outside that, all patterns repeat
 -when numlines is "nicely" divisible by tEnd, we get interesting patterns
 -i think, the pattern has the most symmetric appearance, when the gcd of NumLines and tEnd is 
  large
 -the shape of the pattern seems to depend on the quotient NumLines/tEnd
  60/30, 60/45, 60/15: cross, 60/20: roof, 60/24: pentagons
  other interesting shapes: 60/18, 60/12
  -this seems to suggest, that highly compostive numbers (such as 60) are a good choice for
   NumLines
 -when removing all but one of the rsCurve calls in rsLissajous, thereby removing the 
  artificially enforced symmetry, we get the following shapes:
  60/12, 60/48: pentagram, 60/15: centered line, 60/18,60/42,90/63: zig-zag-polygon, 
  60/20, 60/40: top-right line, 
  60/24, 60/36, 90/54: pentagon
  nice unnamed shapes: 60/50, 60/54, 60/55, 60/56, 60/57, 90/75, 90/9, 90/10, 90/15
  75/60, 90/72, 90/18: pentagram

-the drive actually doesn't do stop-and-go but deforms the shape - but that could be used for 
 rhythmic modulation - on each beat, drive should be maximum maybe negatively maximum on 
 off-beats - maybe modulate drive sinusoidally - should give a nice "pumping" effect
 -maybe drive should be only positive
 -the shape by which drive is modulated may be something other than sine - maybe a train of
  attack/decay envelopes with adjustable attack and decay




info for dat.gui:
https://www.youtube.com/watch?v=x2izqg3fmX4&feature=youtu.be&list=PLb0zKSynM2PBMF67Fo_18vshTDgGf4oyc

-maybe it's possible to make my own version of dat.gui that includes: 
-parameter mappers for sliders
-use shift and/or mouse-wheel for fine-tuning, ctrl for reset (or the other way around